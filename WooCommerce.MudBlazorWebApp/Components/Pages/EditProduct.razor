@page "/editproduct/{ProductId}"
@using WooCommerce.MudBlazorWebApp.Models
@using WooCommerce.MudBlazorWebApp.Services
@using WooCommerceAPI.Models.Services.Foundations.Products
@using WooCommerceAPI.Models.Services.Foundations.ExternalProducts
@using System.ComponentModel.DataAnnotations
@inject WooCommerceService WooService
@inject WordPressService WordPressService
@inject CacheService CacheService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if (uiProduct == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <div class="d-flex">
        <div Class="pr-4 flex-auto">
            <MudForm @ref="form">
                <MudTextField T="string" @bind-Value="uiProduct.Name" Label="Name" />
                <MudTextField T="string" @bind-Value="uiProduct.RegularPrice" Label="Price" />
                <MudTextField T="string" @bind-Value="uiProduct.Sku" Label="Sku" />

                <MudSelect T="string" @bind-Value="uiProduct.Status" Label="Status" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("published")" />
                    <MudSelectItem Value="@("draft")" />
                    <MudSelectItem Value="@("pending review")" />
                </MudSelect>

                <MudTextField T="int?" @bind-Value="uiProduct.StockQuantity" Label="Stock Quantity" />
            </MudForm>
            <MudButton Class="mr-4 mt-4" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@SubmitEdits">Submit</MudButton>

            <MudContainer Class="pa-4 mt-4">
                @if (successCode == 0)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else if (successCode == 1)
                {
                    <MudText Color="@Color.Error">
                        Try again
                    </MudText>
                }
                else if (successCode == 2)
                {
                    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                }
            </MudContainer>

        </div>
        <div class="flex-1" style="margin-top: 6px">
            @if (uiProduct.Images != null)
            {
                <MudGrid>
                    @for (int i = 0; i < uiProduct.Images.Count; i++)
                    {
                        int localindex = i;
                        <MudItem Style="display: flex; flex-direction: column;">
                            <MudImage Src="@uiProduct.Images[localindex].Src" Width="200" />
                            <MudButton Variant="Variant.Filled" tabindex="@i" OnClick="@(e => RemoveImage(localindex))" StartIcon="@Icons.Material.Filled.Close" IconColor="Color.Primary">
                            </MudButton>
                        </MudItem>
                    }
                </MudGrid>
                <MudFileUpload T="IBrowserFile" OnFilesChanged="UploadFiles" Multiple>
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   for="@context.Id">
                            Upload image
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public string ProductId { get; set; }

    int successCode = -1;
    MudTextField<string> pwField1;
    MudForm form;
    private Product product;
    private ProductV uiProduct { get; set; }
    IList<IBrowserFile> files = new List<IBrowserFile>();
    private async Task UploadFiles(InputFileChangeEventArgs args)
    {
        foreach (var file in args.GetMultipleFiles())
        {
            files.Add(file);

            var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot\\uploads\\images", file.Name);
            try
            {
                using (var fs = new FileStream(path, FileMode.Create))
                {
                    await file.OpenReadStream(2512000).CopyToAsync(fs);
                }
                string imagePath = Path.Combine("uploads", "images", file.Name); // Relative path inside wwwroot
                string imageUrl = $"{NavigationManager.BaseUri}{imagePath}"; // Full URL

                uiProduct.Images.Add(new ImageV()
                {
                    Src = imageUrl,
                    LocalPath = path, // not correct value
                    newImg = true
                });
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (CacheService.ColdSingle())
        {
            product = await WooService.GetProductAsync(int.Parse(ProductId));
            CacheService.SetCurrentProduct(product);
        }
        else
        {
            product = CacheService.GetCurrentProduct();
        }
        uiProduct = new();
        uiProduct.Name = product.Name;
        uiProduct.StockQuantity = product.StockQuantity;
        uiProduct.Sku = product.Sku;
        uiProduct.Status = product.Status;
        uiProduct.Description = product.Description;
        uiProduct.Images = new();
        uiProduct.Price = product.Price;
        uiProduct.RegularPrice = product.RegularPrice;
        uiProduct.SalePrice = product.SalePrice;
        for (int i = 0; i < product.Images.Length; i++)
        {
            uiProduct.Images.Add(
                new ImageV()
                {
                    Src = product.Images[i].Src,
                    Id = product.Images[i].Id
                }
            );
        }
    }

    private void RemoveImage(int j)
    {
        uiProduct.Images.RemoveAt(j);
        StateHasChanged();
    }

    private async Task SubmitEdits()
    {
        try
        {
            successCode = 2;
            StateHasChanged();
            CacheService.SetCurrentProduct(product);
            product.ManageStock = true;

            // 1. upload images
            for (int i = 0; i < uiProduct.Images.Count; i++)
            {
                if (!uiProduct.Images[i].newImg)
                    continue;
                var x = await WordPressService.UploadMediaAsync(uiProduct.Images[i].LocalPath);
                uiProduct.Images[i].Id = x.Response.Id;
            }
            Image[] m = new Image[uiProduct.Images.Count];
            for (int i = 0; i < uiProduct.Images.Count; i++)
            {
                Image c = new();
                c.Id = uiProduct.Images[i].Id;
                m[i] = c;
            }
            product.Images = m;
            await WooService.UpdateProductAsync(product);
            successCode = 0;
        }
        catch (Exception e)
        {
            successCode = 1;
        }
        StateHasChanged();
    }
}
