@page "/editproduct/{ProductId}"
@using WooCommerce.MudBlazorWebApp.Services
@using WooCommerceAPI.Models.Services.Foundations.Products
@using System.ComponentModel.DataAnnotations
@inject WooCommerceService WooService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if (product == null || product.Request == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <MudForm @ref="form">

                    <MudTextField T="string" @bind-Value="product.Request.Name" Label="Name" />
                    <MudTextField T="string" @bind-Value="product.Request.RegularPrice" Label="Regular Price" />
                    @* <MudTextField T="string" @bind-Value="product.Request.Sku" Label="Sku" /> *@
                </MudForm>
            </MudPaper>
            <MudPaper Class="pa-4 mt-4">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@SubmitEdits">Submit</MudButton>
            </MudPaper>

            <MudContainer Class="pa-4 mt-4">
            @if (successCode == 0)
            {
                <MudText Color="Color.Success">Success</MudText>
            }
            else if (successCode == 1)
            {
                <MudText Color="@Color.Error">
                    Try again
                </MudText>
            }
            else if (successCode == 2)
            {
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            }
            </MudContainer>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter]
    public string ProductId { get; set; }
    int successCode = -1;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
    private Product product;

    public EditProduct()
    {
        // product = new Product();
        // product.Response = new();
        // product.Request = new();
    }

    private async Task SubmitEdits()
    {
        try
        {
            successCode = 2;
            StateHasChanged();
            WooService.SetCurrentProduct(product);
            await WooService.UpdateProductAsync(product);
            successCode = 0;
        }
        catch (Exception e)
        {
            successCode = 1;
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        product = await WooService.GetCachedProductAsync(int.Parse(ProductId));
        product.Request.Name = product.Response.Name;
        product.Request.RegularPrice = product.Response.RegularPrice;
    }
}
