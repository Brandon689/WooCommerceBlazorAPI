@page "/products"
@using WooCommerce.MudBlazorWebApp.Services
@using WooCommerceAPI.Models.Services.Foundations.Products
@inject WooCommerceService WooService
@inject CacheService CacheService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Product List</h3>

 @if (Elements == null)
{
<MudPaper Class="pa-4">
    <MudSkeleton Animation="Animation.Wave" Height="20px" Class="mb-2" />
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudSkeleton Animation="Animation.Wave" Height="20px" />
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudSkeleton Animation="Animation.Wave" Height="20px" />
        </MudItem>
    </MudGrid>
    <MudSkeleton Animation="Animation.Wave" Height="100px" Class="my-2" />
    @for (int i = 0; i < 5; i++)
    {
        <MudGrid>
            <MudItem xs="1">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="80px" Width="80px" />
            </MudItem>
            <MudItem xs="7">
                <MudSkeleton Animation="Animation.Wave" Height="40px" />
            </MudItem>
            <MudItem xs="4">
                <MudSkeleton Animation="Animation.Wave" Height="40px" />
            </MudItem>
        </MudGrid>
    }
</MudPaper>
}
else
{
    <MudSwitch @bind-Value="@_selectOnRowClick">Select on row click</MudSwitch>
    <MudText Inline="true">Item: @_selectedItemText</MudText>
    <MudText>Selected items (@selectedItems?.Count)</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => EditProductF())">Edit product</MudButton>

    <MudTable @ref="_table" T="Product" Items="@Elements" MultiSelection="true" @bind-SelectedItems="selectedItems" Hover="true" RowsPerPage="50"
              OnRowClick="@OnRowClick" @bind-SelectOnRowClick="@_selectOnRowClick">
        <HeaderContent>
            <MudTh>Image</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>SKU</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Quantity</MudTh>
            <MudTh>Stock</MudTh>
            <MudTh>Categories</MudTh>
            <MudTh>Date</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Image" style="width: 100px;">
            @if (!string.IsNullOrWhiteSpace(context.Images.FirstOrDefault()?.Src))
            {
                <MudImage Src="@context.Images[0].Src" Style="width: 100px; height: 100px;" />
            }
            else
            {
                <span Style="width: 100px; height: 100px;">-</span>
            }
            </MudTd>
            <MudTd DataLabel="Name">
                <div style=" max-width: 350px; overflow-wrap: break-word; white-space: pre-wrap;">
                    @context.Name
                </div>
            </MudTd>
            <MudTd DataLabel="SKU">@context.Sku</MudTd>
            <MudTd DataLabel="Price">@formatPrice(context.Price)</MudTd>
            <MudTd DataLabel="Quantity">@context.StockQuantity</MudTd>
            <MudTd DataLabel="Stock">@context.StockStatus</MudTd>
            <MudTd DataLabel="Categories">
                <div style=" max-width: 250px; overflow-wrap: break-word; white-space: pre-wrap;">
                    @String.Join(", ", context.Categories.Select(x => x.Name))
                </div>
            </MudTd>
            <MudTd DataLabel="Stock">@context.DateCreated</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 25, 50, 100 }" />
        </PagerContent>
        <FooterContent>
            <MudTd colspan="5">Select All</MudTd>
        </FooterContent>
    </MudTable>
}

@code {
    private HashSet<Product> selectedItems = new HashSet<Product>();
    private IEnumerable<Product> Elements = null;
    private bool _selectOnRowClick = true;
    private MudTable<Product> _table;
    private string _selectedItemText = "No row clicked";

    protected override async Task OnInitializedAsync()
    {
        if (CacheService.Cold())
        {
            Elements = await WooService.GetAllProductsAsync();
            CacheService.SetProducts(Elements);
        }
        else
        {
            Elements = CacheService.GetProducts();
        }
    }

    private void OnRowClick(TableRowClickEventArgs<Product> args)
    {
        _selectedItemText = $"{args.Item.Name} ({args.Item.Id})";
    }

    private string formatPrice(string originalNumber)
    {
        var parts = originalNumber.Split('.');

        if (parts.Length == 2) // If there's a fractional part
        {
            string fractionalPart = parts[1];
            if (fractionalPart.Length > 2)
            {
                // If more than two digits after the decimal, truncate
                fractionalPart = fractionalPart.Substring(0, 2);
            }
            else if (fractionalPart.Length < 2)
            {
                // If less than two digits after the decimal, pad with zero
                fractionalPart = fractionalPart.PadRight(2, '0');
            }
            originalNumber = parts[0] + "." + fractionalPart;
        }
        else if (parts.Length == 1) // If no fractional part
        {
            // Add ".00" if there's no decimal point
            originalNumber += ".00";
        }
        return originalNumber;
    }

    private void EditProductF()
    {
        if (selectedItems.Count == 1)
        {
            Product product = selectedItems.First();

            CacheService.SetCurrentProduct(product);
            NavigationManager.NavigateTo($"/editproduct/{selectedItems.First().Id}");
        }
    }
}
