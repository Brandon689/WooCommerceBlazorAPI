@page "/bee"
@rendermode InteractiveServer
@* 
    <MudForm @ref="form" @onsubmit="HandleSubmit">
        <MudFileInput Label="Select a file" @bind-Files="files" InputIcon="Icons.Filled.CloudUpload" />
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Submit</MudButton>
    </MudForm> *@

    <MudGrid>
    @for (int i = 0; i < 1; i++)
    {
        int localindex = i;
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard>
                    <MudCardContent>
                    <p>@localindex</p>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>

<MudGrid>
    <MudItem xs="12">
        <MudSlider Min="1" Max="20" Immediate="true" Step="1" @bind-Value="papers"></MudSlider>
    </MudItem>
    <MudItem xs="12">
        <MudSelect Label="Justify" T="Justify" @bind-Value="justification">
            <MudSelectItem Value="Justify.FlexStart">Flex Start</MudSelectItem>
            <MudSelectItem Value="Justify.FlexEnd">Flex End</MudSelectItem>
            <MudSelectItem Value="Justify.Center">Center</MudSelectItem>
            <MudSelectItem Value="Justify.SpaceAround">Space Around</MudSelectItem>
            <MudSelectItem Value="Justify.SpaceBetween">Space Between</MudSelectItem>
            <MudSelectItem Value="Justify.SpaceEvenly">Space Evenly</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs="12">
        <MudGrid Justify="justification">
            @for (int i = 0; i < papers; i++)
            {
                int localindex = i;

                <MudItem xs="@breaks[localindex]">
                    <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full py-8">
                        <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" OnClick="(()=>UpdateBreaks(localindex,1))" Size="Size.Small" />
                        <MudText Typo="Typo.h6" Align="Align.Center">@breaks[localindex]</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowDown" OnClick="(()=>UpdateBreaks(localindex,-1))" Size="Size.Small" />
                        </MudPaper>
                    </MudItem>
            }
        </MudGrid>
    </MudItem>
</MudGrid>

@code {

    // private MudForm form;
    // private IReadOnlyList<IBrowserFile> files;

    // private async Task HandleSubmit()
    // {
    //     // Your form submission logic here
    //     if (files != null && files.Count > 0)
    //     {
    //         // Due to security reasons, you can't access the file path directly.
    //         // However, you can access the file content. Here's how you might start processing a file.
    //         var file = files.First();
    //         using (var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024)) // Limit file size to 1MB
    //         {
    //             // Process the file here, for example, save it to a server, etc.
    //             // Since you mentioned needing the file path (which is not accessible due to browser security),
    //             // you'll need to work with the file's content directly.
    //         }

    //         // Example: Show a notification about the file upload - customize as needed
    //         Console.WriteLine($"Uploaded file: {file.Name}");
    //     }
    // }


    int _papers = 7;
    int papers { get { return _papers; } set { UpdatePapers(value); } }

    int[] breaks = new int[7] { 3, 4, 2, 3, 3, 2, 4 };

    Justify justification = Justify.FlexStart;

    void UpdatePapers(int value)
    {

        int[] newbreaks = Enumerable.Repeat(3, value).ToArray();

        for (int i = 0; i < newbreaks.Length; i++)
        {
            if (i < breaks.Length)
            {
                newbreaks[i] = breaks[i];
            }
        }

        breaks = newbreaks;

        _papers = value;

        StateHasChanged();
    }

    void UpdateBreaks(int index, int changeamount)
    {
        List<int> newbreaks = breaks.ToList();
        if (newbreaks[index] + changeamount > 12 || newbreaks[index] + changeamount < 1) return; //don't go above 12 or below 1
        newbreaks[index] += changeamount;

        breaks = newbreaks.ToArray();

        StateHasChanged();
    }

}